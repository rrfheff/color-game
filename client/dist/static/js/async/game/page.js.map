{"version":3,"file":"static/js/async/game/page.js","sources":["webpack://client/./src/routes/game/index.css?59a4","/Users/ruofan.ruan/Desktop/projects/color-game/client/src/generateToken.ts","/Users/ruofan.ruan/Desktop/projects/color-game/client/src/routes/game/page.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1736956767742\n        var cssReload = require(\"../../../../node_modules/.pnpm/@rspack+core@1.1.8_@swc+helpers@0.5.15/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import CryptoJS from \"crypto-js\";\nexport function generateAuthHeader(payload: any) {\n  // This should match the server-side SECRET_KEY\n  const SECRET_KEY = \"KEfw-asdf-1234-5678-9012\";\n\n  const timestamp = Date.now().toString();\n  const token = CryptoJS.HmacSHA256(\n    JSON.stringify({\n      ...payload,\n      timestamp,\n    }),\n    SECRET_KEY\n  ).toString();\n\n  return {\n    token,\n    timestamp,\n  };\n}\n","import { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { useSearchParams } from \"@modern-js/runtime/router\";\nimport { generateAuthHeader } from \"@/generateToken\";\n\n// Define types for our color game\ntype ColorOption = {\n  name: string;\n  value: string;\n};\n\nconst COLORS: ColorOption[] = [\n  { name: \"Red\", value: \"#FF0000\" },\n  { name: \"Green\", value: \"#008000\" },\n  { name: \"Blue\", value: \"#0000FF\" },\n  { name: \"Yellow\", value: \"#FFD700\" },\n  { name: \"Black\", value: \"#000000\" },\n  { name: \"White\", value: \"#FFFFFF\" },\n  { name: \"Purple\", value: \"#800080\" },\n  { name: \"Pink\", value: \"#FFC0CB\" },\n  { name: \"Gray\", value: \"#808080\" },\n];\n\nconst MAX_ERRORS = 3;\nconst MAX_INTERVAL = 5000; // 5 seconds\nconst MIN_INTERVAL = 3000; // 3 seconds\nconst INTERVAL_DECREASE = 200; // Decrease by 200ms each round\n\nconst Index = () => {\n  const [searchParams] = useSearchParams();\n  const gameId = searchParams.get(\"gameId\");\n  const [isWaiting, setIsWaiting] = useState(false);\n  const [playerName, setPlayerName] = useState(\"\");\n  const [currentWord, setCurrentWord] = useState<ColorOption | null>(null);\n  const [displayColor, setDisplayColor] = useState<ColorOption | null>(null);\n  const [previousColor, setPreviousColor] = useState<ColorOption | null>(null);\n  const [options, setOptions] = useState<ColorOption[]>([]);\n  const [gamePhase, setGamePhase] = useState<\n    \"welcome\" | \"display\" | \"question\" | \"error\" | \"gameOver\"\n  >(\"welcome\");\n  const [score, setScore] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [errorType, setErrorType] = useState<\"timeout\" | \"wrong\" | null>(null);\n  const [roundCount, setRoundCount] = useState(0);\n  const [currentInterval, setCurrentInterval] = useState(MAX_INTERVAL);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  const handleStartGame = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      return;\n    }\n    // if gameId is not provided, start a offline game\n    if (!gameId) {\n      generateRound();\n      setGamePhase(\"display\");\n      return;\n    }\n\n    setIsWaiting(true);\n\n    const eventSource = new EventSource(\n      `http://localhost:8501/listen/${gameId}?userName=${playerName}`,\n    );\n    eventSource.onmessage = function (event) {\n      if (event.data === \"ready\") {\n        setIsWaiting(false);\n        generateRound();\n        setGamePhase(\"display\");\n      }\n    };\n  };\n\n  // Add reset game function\n  const resetGame = () => {\n    setScore(0);\n    setErrorCount(0);\n    setErrorType(null);\n    setRoundCount(0);\n    setCurrentInterval(MAX_INTERVAL);\n    generateRound();\n    setGamePhase(\"display\");\n  };\n\n  // Generate random colors for display\n  const generateRound = () => {\n    const wordColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const textColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    setCurrentWord(wordColor);\n    setDisplayColor(textColor);\n  };\n\n  // Generate answer options\n  const generateOptions = (correctColor: ColorOption) => {\n    const shuffledColors = [...COLORS]\n      .filter((c) => c !== correctColor)\n      .sort(() => Math.random() - 0.5)\n      .slice(0, 2);\n\n    const allOptions = [...shuffledColors, correctColor].sort(\n      () => Math.random() - 0.5\n    );\n\n    setOptions(allOptions);\n  };\n\n  // Start new round\n  useEffect(() => {\n    generateRound();\n  }, []);\n\n  // Add function to calculate interval based on round count\n  const calculateInterval = (round: number) => {\n    const newInterval = MAX_INTERVAL - round * INTERVAL_DECREASE;\n    return Math.max(newInterval, MIN_INTERVAL);\n  };\n\n  // Modified useEffect for timer with countdown\n  useEffect(() => {\n    if (gamePhase === \"display\") {\n      setRemainingTime(currentInterval / 1000);\n      const mainTimer = setTimeout(() => {\n        setPreviousColor(displayColor);\n        generateOptions(displayColor!);\n        generateRound();\n        setGamePhase(\"question\");\n      }, currentInterval);\n\n      // Add countdown timer\n      const countdownInterval = setInterval(() => {\n        setRemainingTime((prev) => Math.max(0, prev - 0.1));\n      }, 100);\n\n      return () => {\n        clearTimeout(mainTimer);\n        clearInterval(countdownInterval);\n      };\n    } else if (gamePhase === \"question\") {\n      setRemainingTime(currentInterval / 1000);\n      const mainTimer = setTimeout(() => {\n        setErrorType(\"timeout\");\n        setErrorCount((prev) => prev + 1);\n        setGamePhase(\"error\");\n\n        setTimeout(() => {\n          if (errorCount + 1 >= MAX_ERRORS) {\n            setGamePhase(\"gameOver\");\n          } else {\n            setRoundCount(0);\n            setCurrentInterval(MAX_INTERVAL);\n            generateRound();\n            setGamePhase(\"display\");\n          }\n        }, 2000);\n      }, currentInterval);\n\n      // Add countdown timer\n      const countdownInterval = setInterval(() => {\n        setRemainingTime((prev) => Math.max(0, prev - 0.1));\n      }, 100);\n\n      return () => {\n        clearTimeout(mainTimer);\n        clearInterval(countdownInterval);\n      };\n    }\n  }, [gamePhase, displayColor, errorCount, currentInterval]);\n\n  // Modified handleAnswer\n  const handleAnswer = (selectedColor: ColorOption) => {\n    if (selectedColor === previousColor) {\n      setScore(score + 1);\n      setRoundCount((prev) => prev + 1);\n      const newInterval = calculateInterval(roundCount + 1);\n      setCurrentInterval(newInterval);\n      setPreviousColor(displayColor);\n      generateOptions(displayColor!);\n      generateRound();\n    } else {\n      setErrorType(\"wrong\");\n      setErrorCount((prev) => prev + 1);\n      setGamePhase(\"error\");\n\n      setTimeout(() => {\n        if (errorCount + 1 >= MAX_ERRORS) {\n          setGamePhase(\"gameOver\");\n        } else {\n          setRoundCount(0); // Reset round count on error\n          setCurrentInterval(MAX_INTERVAL); // Reset interval on error\n          generateRound();\n          setGamePhase(\"display\");\n        }\n      }, 2000);\n    }\n  };\n\n  // Helper function to render hearts\n  const renderHearts = () => {\n    const hearts = [];\n    const remainingHearts = MAX_ERRORS - errorCount;\n\n    for (let i = 0; i < remainingHearts; i++) {\n      hearts.push(\n        <span key={i} className=\"heart\">\n          ‚ù§Ô∏è\n        </span>\n      );\n    }\n    for (let i = remainingHearts; i < MAX_ERRORS; i++) {\n      hearts.push(\n        <span key={i} className=\"heart empty\">\n          üñ§\n        </span>\n      );\n    }\n\n    return hearts;\n  };\n\n  useEffect(() => {\n    if (gamePhase === \"gameOver\" && gameId) {\n      fetch(`http://localhost:8501/record`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...generateAuthHeader({\n            gameId: gameId,\n            userName: playerName,\n            score: score,\n          }),\n        },\n        body: JSON.stringify({\n          gameId: gameId,\n          userName: playerName,\n          score: score,\n        }),\n      })\n    }\n  }, [gamePhase]);\n\n  return (\n    <div className=\"container-box\">\n      {gamePhase === \"welcome\" ? (\n        <div className=\"welcome-screen\">\n          <h1>Welcome to Color Memory Game!</h1>\n\n          <div className=\"game-rules\">\n            <h2>How to Play:</h2>\n            <ol>\n              <li>A colored word will be shown for 5 seconds</li>\n              <li>\n                Then you'll see a new word and must remember the{\" \"}\n                <strong>color</strong> of the previous word\n              </li>\n              <li>\n                Select the correct color from the options within the time limit\n              </li>\n              <li>\n                You have 3 lives (‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è) - game ends if you make 3 mistakes\n              </li>\n              <li>\n                The game gets faster as you progress:\n                <ul>\n                  <li>Starting time: 5 seconds</li>\n                  <li>Time decreases by 0.2 seconds each round</li>\n                  <li>Minimum time: 3 seconds</li>\n                </ul>\n              </li>\n              <li>\n                Mistakes happen when you:\n                <ul>\n                  <li>Choose the wrong color</li>\n                  <li>Don't answer within the time limit</li>\n                </ul>\n              </li>\n              <li>\n                After any mistake:\n                <ul>\n                  <li>Time resets to 5 seconds</li>\n                </ul>\n              </li>\n            </ol>\n          </div>\n\n          {!isWaiting ? (\n            <form onSubmit={handleStartGame}>\n              <input\n                type=\"text\"\n                value={playerName}\n                onChange={(e) => setPlayerName(e.target.value)}\n                placeholder=\"Enter your name\"\n                className=\"name-input\"\n                maxLength={20}\n                required\n              />\n              <button type=\"submit\" className=\"start-button\">\n                Start Game\n              </button>\n              {!gameId && (\n                <p className=\"offline-hint\">\n                  No game ID detected - you'll be playing in offline mode\n                </p>\n              )}\n            </form>\n          ) : (\n            <div className=\"waiting-screen\">\n              <h2>Waiting for game to start...</h2>\n              <p>Game ID: {gameId}</p>\n              <button\n                onClick={() => setIsWaiting(false)}\n                className=\"cancel-button\"\n              >\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      ) : (\n        <>\n          <div className=\"stats\">\n            <span>Player:</span>\n            <span className=\"player-name\">{playerName}</span>\n            <span>HP:</span>\n            <span className=\"hearts\">{renderHearts()}</span>\n            <span>Score:</span>\n            <span>{score}</span>\n          </div>\n\n          {gamePhase === \"display\" && currentWord && displayColor && (\n            <div className=\"color-word\" style={{ color: displayColor.value }}>\n              {currentWord.name}\n            </div>\n          )}\n\n          {gamePhase === \"question\" && currentWord && displayColor && (\n            <>\n              <div className=\"color-word\" style={{ color: displayColor.value }}>\n                {currentWord.name}\n              </div>\n              <div className=\"question-phase\">\n                <div className=\"question\">\n                  What was the color of the previous word?\n                </div>\n                <div className=\"timer-display\">\n                  Time remaining: {remainingTime.toFixed(1)}s\n                </div>\n                <div className=\"options\">\n                  {options.map((color, index) => (\n                    <button\n                      key={color.name}\n                      onClick={() => handleAnswer(color)}\n                      className=\"option-button\"\n                    >\n                      {String.fromCharCode(65 + index)}: {color.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {gamePhase === \"error\" && (\n            <div className=\"error-message\">\n              {errorType === \"timeout\"\n                ? \"Time's up! The correct color was \"\n                : \"Wrong answer! The correct color was \"}\n              <b>{previousColor?.name}</b>\n            </div>\n          )}\n\n          {gamePhase === \"gameOver\" && (\n            <div className=\"game-over\">\n              <div>Game Over! Final Score: {score}</div>\n              <button onClick={resetGame} className=\"play-again-button\">\n                Play Again\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Index;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAcA;;AAbA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAxBA;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;;;;;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;;;;;;AACA;;AACA;AAAA;;;;;;AACA;;AAAA;AACA;AACA;AAAA;;;;;;AAAA;;;;;;;AAEA;AAAA;;;;;;AAGA;AAAA;;;;;;AAGA;;AAAA;AAEA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAEA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;;;;;;;;;;;AAMA;AAAA;;AACA;AAAA;;;;;;AACA;;AAAA;AAAA;;;;;;;AACA;AACA;AAAA;;AACA;AACA;;;;;;;;;;;;;;;;;AAOA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;;AAAA;AACA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AAEA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAJA;;;;;;;;;;;;;;;;;;;AAYA;AACA;;AACA;AAGA;AAAA;;;;;;;;;;;;AAIA;AACA;;AACA;;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AASA;AAlWA;;AACA;;;AADA;AAoWA"}