{"version":3,"file":"static/js/async/page.js","sources":["/Users/ruofan.ruan/Desktop/projects/color-game/node_modules/.pnpm/@rspack+core@1.1.8_@swc+helpers@0.5.15/node_modules/@rspack/core/dist/cssExtractHmr.js","/Users/ruofan.ruan/Desktop/projects/color-game/client/src/routes/index.css","/Users/ruofan.ruan/Desktop/projects/color-game/client/src/routes/page.tsx"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/runtime/cssExtractHmr.ts\nvar cssExtractHmr_exports = {};\n__export(cssExtractHmr_exports, {\n  cssReload: () => cssReload,\n  normalizeUrl: () => normalizeUrl\n});\nmodule.exports = __toCommonJS(cssExtractHmr_exports);\nfunction normalizeUrl(url) {\n  const urlString = url.trim();\n  if (/^data:/i.test(urlString)) {\n    return urlString;\n  }\n  const protocol = urlString.indexOf(\"//\") !== -1 ? `${urlString.split(\"//\")[0]}//` : \"\";\n  const components = urlString.replace(new RegExp(protocol, \"i\"), \"\").split(\"/\");\n  const host = components[0].toLowerCase().replace(/\\.$/, \"\");\n  components[0] = \"\";\n  const path = components.reduce((accumulator, item) => {\n    switch (item) {\n      case \"..\":\n        accumulator.pop();\n        break;\n      case \".\":\n        break;\n      default:\n        accumulator.push(item);\n    }\n    return accumulator;\n  }, []).join(\"/\");\n  return protocol + host + path;\n}\nvar srcByModuleId = /* @__PURE__ */ Object.create(null);\nvar noDocument = typeof document === \"undefined\";\nvar { forEach } = Array.prototype;\nfunction debounce(fn, time) {\n  let timeout = 0;\n  return function(...args) {\n    const self = this;\n    const functionCall = function functionCall2() {\n      return fn.apply(self, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n}\nfunction noop() {\n}\nfunction getCurrentScriptUrl(moduleId) {\n  let src = srcByModuleId[moduleId];\n  if (!src) {\n    if (document.currentScript) {\n      ({ src } = document.currentScript);\n    } else {\n      const scripts = document.getElementsByTagName(\"script\");\n      const lastScriptTag = scripts[scripts.length - 1];\n      if (lastScriptTag) {\n        ({ src } = lastScriptTag);\n      }\n    }\n    srcByModuleId[moduleId] = src;\n  }\n  return (fileMap) => {\n    if (!src) {\n      return null;\n    }\n    const splitResult = src.match(/([^\\\\/]+)\\.js$/);\n    const filename = splitResult && splitResult[1];\n    if (!filename || !fileMap) {\n      return [src.replace(\".js\", \".css\")];\n    }\n    return fileMap.split(\",\").map((mapRule) => {\n      const reg = new RegExp(`${filename}\\\\.js$`, \"g\");\n      return normalizeUrl(\n        src.replace(reg, `${mapRule.replace(/{fileName}/g, filename)}.css`)\n      );\n    });\n  };\n}\nfunction updateCss(el, url) {\n  let normalizedUrl;\n  if (!url) {\n    if (!el.href) {\n      return;\n    }\n    normalizedUrl = el.href.split(\"?\")[0];\n  } else {\n    normalizedUrl = url;\n  }\n  if (!isUrlRequest(normalizedUrl)) {\n    return;\n  }\n  if (el.isLoaded === false) {\n    return;\n  }\n  if (!normalizedUrl || !(normalizedUrl.indexOf(\".css\") > -1)) {\n    return;\n  }\n  el.visited = true;\n  const newEl = el.cloneNode();\n  newEl.isLoaded = false;\n  newEl.addEventListener(\"load\", () => {\n    if (newEl.isLoaded) {\n      return;\n    }\n    newEl.isLoaded = true;\n    if (el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n  });\n  newEl.addEventListener(\"error\", () => {\n    if (newEl.isLoaded) {\n      return;\n    }\n    newEl.isLoaded = true;\n    if (el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n  });\n  newEl.href = `${normalizedUrl}?${Date.now()}`;\n  const parent = el.parentNode;\n  if (!parent) {\n    return;\n  }\n  if (el.nextSibling) {\n    parent.insertBefore(newEl, el.nextSibling);\n  } else {\n    parent.appendChild(newEl);\n  }\n}\nfunction getReloadUrl(href, src) {\n  let ret = \"\";\n  const normalizedHref = normalizeUrl(href);\n  src.some((url) => {\n    if (normalizedHref.indexOf(src) > -1) {\n      ret = url;\n    }\n  });\n  return ret;\n}\nfunction reloadStyle(src) {\n  if (!src) {\n    return false;\n  }\n  const elements = document.querySelectorAll(\"link\");\n  let loaded = false;\n  forEach.call(elements, (el) => {\n    if (!el.href) {\n      return;\n    }\n    const url = getReloadUrl(el.href, src);\n    if (!isUrlRequest(url)) {\n      return;\n    }\n    if (el.visited === true) {\n      return;\n    }\n    if (url) {\n      updateCss(el, url);\n      loaded = true;\n    }\n  });\n  return loaded;\n}\nfunction reloadAll() {\n  const elements = document.querySelectorAll(\"link\");\n  forEach.call(elements, (el) => {\n    if (el.visited === true) {\n      return;\n    }\n    updateCss(el);\n  });\n}\nfunction isUrlRequest(url) {\n  if (!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(url)) {\n    return false;\n  }\n  return true;\n}\nfunction cssReload(moduleId, options) {\n  if (noDocument) {\n    console.log(\"[HMR] No `window.document` found, CSS HMR disabled\");\n    return noop;\n  }\n  const getScriptSrc = getCurrentScriptUrl(moduleId);\n  function update() {\n    const src = getScriptSrc(options.filename);\n    const reloaded = reloadStyle(src);\n    if (options.locals) {\n      console.log(\"[HMR] Detected local CSS Modules. Reload all CSS\");\n      reloadAll();\n      return;\n    }\n    if (reloaded) {\n      console.log(\"[HMR] CSS reload %s\", src && src.join(\" \"));\n    } else {\n      console.log(\"[HMR] Reload all CSS\");\n      reloadAll();\n    }\n  }\n  return debounce(update, 50);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  cssReload,\n  normalizeUrl\n});\n","// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1736678353479\n        var cssReload = require(\"../../../node_modules/.pnpm/@rspack+core@1.1.8_@swc+helpers@0.5.15/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { useState, useEffect } from 'react';\nimport './index.css';\n\n// Define types for our color game\ntype ColorOption = {\n  name: string;\n  value: string;\n};\n\nconst COLORS: ColorOption[] = [\n  { name: 'Red', value: '#FF0000' },\n  { name: 'Green', value: '#008000' },\n  { name: 'Blue', value: '#0000FF' },\n  { name: 'Yellow', value: '#FFD700' },\n  { name: 'Black', value: '#000000' },\n  { name: 'White', value: '#FFFFFF' },\n  { name: 'Purple', value: '#800080' },\n  { name: 'Pink', value: '#FFC0CB' },\n  { name: 'Gray', value: '#808080' },\n];\n\nconst MAX_ERRORS = 3;\nconst MAX_INTERVAL = 5000; // 5 seconds\nconst MIN_INTERVAL = 3000; // 3 seconds\nconst INTERVAL_DECREASE = 200; // Decrease by 200ms each round\n\nconst Index = () => {\n  const [playerName, setPlayerName] = useState('');\n  const [currentWord, setCurrentWord] = useState<ColorOption | null>(null);\n  const [displayColor, setDisplayColor] = useState<ColorOption | null>(null);\n  const [previousColor, setPreviousColor] = useState<ColorOption | null>(null);\n  const [options, setOptions] = useState<ColorOption[]>([]);\n  const [gamePhase, setGamePhase] = useState<'welcome' | 'display' | 'question' | 'error' | 'gameOver'>('welcome');\n  const [score, setScore] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [errorType, setErrorType] = useState<'timeout' | 'wrong' | null>(null);\n  const [roundCount, setRoundCount] = useState(0);\n  const [currentInterval, setCurrentInterval] = useState(MAX_INTERVAL);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  const handleStartGame = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (playerName.trim()) {\n      generateRound();\n      setGamePhase('display');\n    }\n  };\n\n  // Add reset game function\n  const resetGame = () => {\n    setScore(0);\n    setErrorCount(0);\n    setErrorType(null);\n    setRoundCount(0);\n    setCurrentInterval(MAX_INTERVAL);\n    generateRound();\n    setGamePhase('display');\n  };\n\n  // Generate random colors for display\n  const generateRound = () => {\n    const wordColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const textColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    setCurrentWord(wordColor);\n    setDisplayColor(textColor);\n  };\n\n  // Generate answer options\n  const generateOptions = (correctColor: ColorOption) => {\n    const shuffledColors = [...COLORS]\n      .filter(c => c !== correctColor)\n      .sort(() => Math.random() - 0.5)\n      .slice(0, 2);\n    \n    const allOptions = [...shuffledColors, correctColor]\n      .sort(() => Math.random() - 0.5);\n    \n    setOptions(allOptions);\n  };\n\n  // Start new round\n  useEffect(() => {\n    generateRound();\n  }, []);\n\n  // Add function to calculate interval based on round count\n  const calculateInterval = (round: number) => {\n    const newInterval = MAX_INTERVAL - (round * INTERVAL_DECREASE);\n    return Math.max(newInterval, MIN_INTERVAL);\n  };\n\n  // Modified useEffect for timer with countdown\n  useEffect(() => {\n    if (gamePhase === 'display') {\n      setRemainingTime(currentInterval / 1000);\n      const mainTimer = setTimeout(() => {\n        setPreviousColor(displayColor);\n        generateOptions(displayColor!);\n        generateRound();\n        setGamePhase('question');\n      }, currentInterval);\n\n      // Add countdown timer\n      const countdownInterval = setInterval(() => {\n        setRemainingTime(prev => Math.max(0, prev - 0.1));\n      }, 100);\n\n      return () => {\n        clearTimeout(mainTimer);\n        clearInterval(countdownInterval);\n      };\n    } else if (gamePhase === 'question') {\n      setRemainingTime(currentInterval / 1000);\n      const mainTimer = setTimeout(() => {\n        setErrorType('timeout');\n        setErrorCount(prev => prev + 1);\n        setGamePhase('error');\n        \n        setTimeout(() => {\n          if (errorCount + 1 >= MAX_ERRORS) {\n            setGamePhase('gameOver');\n          } else {\n            setRoundCount(0);\n            setCurrentInterval(MAX_INTERVAL);\n            generateRound();\n            setGamePhase('display');\n          }\n        }, 2000);\n      }, currentInterval);\n\n      // Add countdown timer\n      const countdownInterval = setInterval(() => {\n        setRemainingTime(prev => Math.max(0, prev - 0.1));\n      }, 100);\n\n      return () => {\n        clearTimeout(mainTimer);\n        clearInterval(countdownInterval);\n      };\n    }\n  }, [gamePhase, displayColor, errorCount, currentInterval]);\n\n  // Modified handleAnswer\n  const handleAnswer = (selectedColor: ColorOption) => {\n    if (selectedColor === previousColor) {\n      setScore(score + 1);\n      setRoundCount(prev => prev + 1);\n      const newInterval = calculateInterval(roundCount + 1);\n      setCurrentInterval(newInterval);\n      setPreviousColor(displayColor);\n      generateOptions(displayColor!);\n      generateRound();\n    } else {\n      setErrorType('wrong');\n      setErrorCount(prev => prev + 1);\n      setGamePhase('error');\n      \n      setTimeout(() => {\n        if (errorCount + 1 >= MAX_ERRORS) {\n          setGamePhase('gameOver');\n        } else {\n          setRoundCount(0); // Reset round count on error\n          setCurrentInterval(MAX_INTERVAL); // Reset interval on error\n          generateRound();\n          setGamePhase('display');\n        }\n      }, 2000);\n    }\n  };\n\n  // Helper function to render hearts\n  const renderHearts = () => {\n    const hearts = [];\n    const remainingHearts = MAX_ERRORS - errorCount;\n    \n    for (let i = 0; i < remainingHearts; i++) {\n      hearts.push(<span key={i} className=\"heart\">❤️</span>);\n    }\n    for (let i = remainingHearts; i < MAX_ERRORS; i++) {\n      hearts.push(<span key={i} className=\"heart empty\">🖤</span>);\n    }\n    \n    return hearts;\n  };\n\n  return (\n    <div className=\"container-box\">\n      {gamePhase === 'welcome' ? (\n        <div className=\"welcome-screen\">\n          <h1>Welcome to Color Memory Game!</h1>\n          \n          <div className=\"game-rules\">\n            <h2>How to Play:</h2>\n            <ol>\n              <li>A colored word will be shown for 5 seconds</li>\n              <li>Then you'll see a new word and must remember the <strong>color</strong> of the previous word</li>\n              <li>Select the correct color from the options within the time limit</li>\n              <li>You have 3 lives (❤️❤️❤️) - game ends if you make 3 mistakes</li>\n              <li>The game gets faster as you progress:\n                <ul>\n                  <li>Starting time: 5 seconds</li>\n                  <li>Time decreases by 0.2 seconds each round</li>\n                  <li>Minimum time: 3 seconds</li>\n                </ul>\n              </li>\n              <li>Mistakes happen when you:\n                <ul>\n                  <li>Choose the wrong color</li>\n                  <li>Don't answer within the time limit</li>\n                </ul>\n              </li>\n              <li>After any mistake:\n                <ul>\n                  <li>Time resets to 5 seconds</li>\n                </ul>\n              </li>\n            </ol>\n          </div>\n\n          <form onSubmit={handleStartGame}>\n            <input\n              type=\"text\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Enter your name\"\n              className=\"name-input\"\n              maxLength={20}\n              required\n            />\n            <button type=\"submit\" className=\"start-button\">\n              Start Game\n            </button>\n          </form>\n        </div>\n      ) : (\n        <>\n          <div className=\"stats\">\n            <span>Player:</span><span className=\"player-name\">{playerName}</span>\n            <span>HP:</span><span className=\"hearts\">{renderHearts()}</span>\n            <span>Score:</span><span>{score}</span>\n          </div>\n          \n          {gamePhase === 'display' && currentWord && displayColor && (\n            <div \n              className=\"color-word\"\n              style={{ color: displayColor.value }}\n            >\n              {currentWord.name}\n            </div>\n          )}\n\n          {gamePhase === 'question' && currentWord && displayColor && (\n            <>\n              <div \n                className=\"color-word\"\n                style={{ color: displayColor.value }}\n              >\n                {currentWord.name}\n              </div>\n              <div className=\"question-phase\">\n                <div className=\"question\">\n                  What was the color of the previous word?\n                </div>\n                <div className=\"timer-display\">\n                  Time remaining: {remainingTime.toFixed(1)}s\n                </div>\n                <div className=\"options\">\n                  {options.map((color, index) => (\n                    <button\n                      key={color.name}\n                      onClick={() => handleAnswer(color)}\n                      className=\"option-button\"\n                    >\n                      {String.fromCharCode(65 + index)}: {color.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {gamePhase === 'error' && (\n            <div className=\"error-message\">\n              {errorType === 'timeout' \n                ? \"Time's up! The correct color was \" \n                : \"Wrong answer! The correct color was \"}\n              {previousColor?.name}\n            </div>\n          )}\n\n          {gamePhase === 'gameOver' && (\n            <div className=\"game-over\">\n              <div>Game Over! Final Score: {score}</div>\n              <button \n                onClick={resetGame}\n                className=\"play-again-button\"\n              >\n                Play Again\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Index;\n"],"names":[],"mappingsvBA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;;;;;;AACA;;AACA;AAAA;;;;;;AACA;;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;;AAAA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAMA;;AACA;AAAA;;AACA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;;;;;;AAIA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;;AAAA;AACA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AAEA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAJA;;;;;;;;;;;;;;;;;;;AAYA;AACA;;AACA;AAGA;;;;;;;AAIA;AACA;;AACA;;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AASA;AAvRA;AAAA;AAyRA"}